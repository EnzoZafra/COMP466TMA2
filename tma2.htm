<html>

	<head>
		<title>Assignment 2</title>
		<link href="shared/css/materialize.css" type="text/css" rel="stylesheet" media="screen,projection"/>
		<link href="shared/css/style.css" type="text/css" rel="stylesheet" media="screen,projection"/>
	</head>

	<body class="grey lighten-2">

		<div class="container center">
			<h3>COMP 466 - Advanced Technologies for Web-Based Systems</h1>
			<h4>Assignment 2</h2>
			<h5>Lorenzo Zafra - 3356915</h3>
			<h6><b>Date began:</b> March 28, 2018</h4>
			<h6><b>Date completed:</b> April x, 2018</h4>
			<h6><b>Estimated hours spent:</b> x hours</h4>
		</div>

		<hr>
		<div class="container">
			<h4>Part 1 - Bookmark Manager</h4>
			<a href="part1/welcome.php"><b>Click here to access part 1</b></a><br>
			<b>Description</b>
			<p>
				For this project, you will be using MySQL and PHP to develop a web application that provides an online bookmarking service to users on the Internet. The requirements are as follows:
				<ul>
					<li>- The web application should have a good thoughtful interface, with menus and navigation buttons as needed.</li>
					<li>- It should have a name or logo shown across all the pages.</li>
					<li>- It should begin with a welcome or greeting message and a list of ten most popular websites that people have bookmarked.</li>
					<li>- Once signed in, a list of bookmarks should be displayed, and the user can browse any web site in the list in a new browser tab or window by clicking the URL.</li>
					<li>- The user will also be able to add new websites to the list and edit and delete any of the existing ones in the list;</li>
					<li>- When adding or editing, user input needs to be validated using JavaScript, to make sure the URLs are correct and active.</li>
				</ul>
			</p>

			<b>My interpretation</b>
			<p>
				The goal for this part of the assignment is to create a web application that has a well thought out interface and easy to use. The web application should 
				have a navigation bar that allows the user to traverse through all the parts of the application easily. Also, there should be a welcome message and a list
				of the top 10 most bookmarked URL. This requirement implies that we need to use a database so that the information is stored for all users. <br>
				Users should be allowed to sign in and add, edit or delete bookmarks. When adding, we should verify the URL to make sure it is a valid URL.
			</p>

			<b>Analysis and Design of the Web Application</b>
			<p>
			To create the web application, I used a MySQL database to store information about users (username, password) and bookmarks (user, URL). To create the welcome page, 
			I used HTML elements inside a php script. This php script first checks if there is a session that is currently logged. If so, I redirect them to the main page where the 
			user is allowed to add, edit and delete bookmarks. 
			<br><br>

			When the welcome page is loaded, I do a MySQL query to retrieve the top 10 most bookmarked URLs then display them dynamically to the user. 
			Also, from this page, the user can log in using the form. The form sends a post request to a php script 'server/login.php' with the username 
			and an MD5 hashed password appended to the POST request. The php script then takes the username and the hashed password to check if this pair exists in the database
			if so, they are logged in and I set a session variable to hold the username.
			<br>
			Similarly, the user is able to register for an account by using the form which submits a POST request to 'server/register.php'.
			The php script first checks the database if the given username is taken. If not, we hash the password and then store the pair into the database.
			<br><br>

			When logged in, main.php makes a MySQL query for all the bookmarks that belongs to the logged in user. We then display these bookmarks
			dynamically. When adding bookmarks, I used a JavaScript to verify that the URL given is in correct form. Then,
			the form sends a POST request to 'server/addbookmarks.php' which first checks if the URL is taken. If so,
			the POST request redirects the user back to the main.php page with a parameter to show that there is an error. If there is no duplicate, we insert
			the URL to the bookmarks table with the userid. 
			<br><br>

			Similarly, to delete or edit a bookmark, the buttons have a listener which calls a PHP script via an Ajax call. These PHP scripts either 
			delete or update values in the database depending on which button is selected. 

			</p>

			<b>Documentation</b>
			<p>
			Using Materialize CSS, we are able to create an aesthetically pleasing user interface.
			Also, every page has a navigation bar which links to the home page and other pages.
			</p>
			<br><br>

			<b>PHP files</b>
			<p>registerpage.php</p>
			<ul>
				<li>- A form where the user inputs a username and password</li>
				<li>- Form creates a POST request and sends the username / password to `server/register.php`</li>
			</ul>
			<p>register.php</p>
			<ul>
				<li>- PHP script which handles registring the user. Called by a POST request</li>
				<li>- Retrieves username/password from the request, then hashes the password</li>
				<li>- Checks first if username is taken. If not, insert the pair into the database</li>
				<li>- If username is taken, redirect user back to register page with an error</li>
			</ul>
			<p>welcome.php</p>
			<ul>
				<li>- PHP script which displays a login form and the top 10 most bookmarked URLs</li>
				<li>- Top 10 list is retrieved by using a MySQL query to the bookmarks table</li>
				<li>- Login form creates a POST request to 'server/login.php' on submit</li>
			</ul>
			<p>login.php</p>
			<ul>
				<li>- Retrieves username/password from request</li>
				<li>- Hash password and compare with the values in the database</li>
				<li>- If compare is successful, set session variable to the username and redirect them to the main.php page</li>
				<li>- If unsuccessful, redirect them back to the welcome.php page with an error</li>
			</ul>
			<p>main.php</p>
			<ul>
				<li>- The main page for when the user is logged in</li>
				<li>- From here, user is able to add, edit or delete bookmarks</li>
				<li>- Dynamically creates bookmark list using php and a MySQL query</li>
				<li>- Adding bookmarks calls the main.js script which verifies that the URL is in correct form</li>
				<li>- Bookmarks are added by using a form which sends a POST request on submit to addbookmarks.php</li>
				<li>- Bookmarks are deleted by using an Ajax call which sends a POST request on submit to deletebookmarks.php</li>
				<li>- Bookmarks are edited by using an Ajax call which sends a POST request on submit to editbookmarks.php</li>
			</ul>
			<p>addbookmarks.php</p>
			<ul>
				<li>- Checks if the URL already exists for the logged in user</li>
				<li>- If not, insert into the database using MYSQL</li>
			</ul>
			<p>deletebookmark.php</p>
			<ul>
				<li>- Remove the given URL from the bookmarks table</li>
			</ul>
			<p>editbookmark.php</p>
			<ul>
				<li>- Update the bookmark entry with the oldurl to the new url</li>
			</ul>
			<p>logout.php</p>
			<ul>
				<li>- Called by the Logout button in the navigation bar whe logged in</li>
				<li>- Deletes the session variables</li>
				<li>- Redirect the user to the welcome.php page</li>
			</ul>
			<p>forbidden.php</p>
			<ul>
				<li>- Users are redirected here when the users try to access the PHP server scripts without POST variables</li>
			</ul>
			<p>database.php</p>
			<ul>
				<li>- Wrapper for creating MySQL requests easily</li>
				<li>- A singleton class which has an instance of the database</li>
				<li>- Contains the login info needed for database connection</li>
			</ul>
			<p>database_init.php</p>
			<ul>
				<li>- Initializes the tables in the database</li>
				<li>- Creates two tables: users and bookmarks</li>
				<li>- The schema of the tables is:</li>
				<li>- <img src="shared/img/dbschema.png"></img></li>
			</ul>

			<b>Set up and running</b>
			<p>
			First, you need to have an apache and mysql stack running. This can be setup using XAMPP. I followed
			the tutorial found <a href="https://blog.udemy.com/xampp-tutorial/">here.</a>
			<br>
			Move or copy all the files from this directory (TMA2) to the XAMPP stack's 'htdocs' folder.
			<br>
			Then, the MySQL database needs to be set-up. To do this, create a database called 'bmmanager' in your
			MySQL stack and a user with the following credentials: username/pass = 'comp466admin'/'password'. This user
			needs to have permission to the 'bmmanager' database. The tables needed for this database are initialized
			on the first run of welcome.php.
			<br><br>

			To access welcome php, open 'welcome.php' path on your browser. For example, assuming you have already
			moved the 'TMA2' directory to the 'htdocs' folder, go to the URL: 'localhost/TMA2/part1/welcome.php'.
			</p>
		</div>

		<hr>
		<div class="container">
			<h4>Part 2 - Lecture & Quiz Documentation</h4>
			<a href="part2/index.html"><b>Click here to access part 2</b></a><br>
			<b>Description</b>
			<p>
				Using the web technologies you have learned so far, including
				HTML5, CSS3, JavaScript, XML and Ajax, write a web application,
				that can help people to learn the technologies covered in
				Unit 1, Unit 2, or Unit 3 of the course.

				The requirements are detailed as follows:
				<ol>
					<li>It must be a web-based system with a name you choose, a banner to show off your work, navigation menus and buttons. It should begin with a welcome page to greet the users, to explain what the application does, and what they get from it, and how they should proceed.</li>
					<li>The application must have three pages of tutorials, accessible through navigation menus or buttons, to teach the technologies covered in Unit 1, Unit 2 and Unit 3 respectively. You don't need to teach everything, but there should be enough content to make each of the tutorials useful.</li>
					<li>There should be a quiz for each tutorial, which can be accessed right after the tutorial page, as well as through the navigation menus and buttons of the system.</li>
					<li>After the submission button is hit, the quiz system should be able to grade the answers the learner has provided, show the correct answers as well as the score in percentage.</li>
					<li>The quiz system should be designed so that questions can be easily edited, added, or deleted, and new quiz can be easily created.</li>
					<li>You should do your best to use the web technologies covered in Unit 1, unit 2 and Unit 3, including HTML5, CSS3, JavaScript, XML and Ajax.</li>
					<li>Your web application should use or teach at least five page-structure elements and six new input types</li>
					<li>You should use an external style sheet for all pages of the system, to retain a consistent and user-friendly interface for your system.</li>
					<li>When using HTML5 table, be sure that you only use it to display tabular information, not to lay out the elements on your page.</li>
				</ol>

			</p>

			<b>My interpretation</b>
			<p>
				This part of the assignment requires us to create a tutorial on the basics of web development topics such as CSS, HTML, JavaScript, Ajax and XML.
				In order to learn HTML elements, we should use different kinds of elements such as headers and also form elements like text fields, radio buttons and checkboxes.
				The description also requires us to create a quiz at the end of each tutorial. The quiz should show the user's mark and the correct answers.
				Also, the quiz should be designed so that questions can be easily added. Therefore, the assignment's UI should not be static but rather dynamically created.
				By using the technologies learned in Units 1, 2 and 3 (JavaScript, XML and Ajax to be exact) we can create the UI dynamically.
			</p>

			<b>Analysis and Design of the Web Application</b>
			<p>
				First, the main page or index.html contains a welcome page that tells the user what the application does.
				In the middle, the user is able to select which Unit they want to learn from the dropdown box. They can also select
				which unit using the navigation menu which is available in every page of this assignment. When the user clicks a unit,
				They are brought to another .html file which contains the lecture for the unit.
				<br><br>

				Information about the topics in each unit are stored in an XML file. Each topic belongs in the notes section of the XML file
				and each topic has subtopics. For example, the HTML5 topic may have Elements and Forms as its subtopic. In this way, we can use JavaScript
				and Ajax (XMLHttpRequest) to dynamically load the XML file and create the notes section in HTML.
				The information is loaded into the .html file when the .html file calls a JavaScript file called loadnotes.js.
				<br><br>

				In loadnotes.js, we create an XMLHttpRequest object to do a GET request obtaining the XML file where the information
				about the unit resides. We then use a DOMParser to parse through the XML file and dynamically create a list of notes for the user to read in HTML.
				By following the XML structure, we are able to separate which information are subtopic and should be displayed as headers and which are notes.
				<br><br>

				At the end of the lecture, a button is created which leads the user to a quiz page. In a similar fashion, the quiz questions and answers are stored in an XML file.
				To build the quiz, we call a JavaScript function called buildQuiz(). The function creates an XMLHttpRequest and a GET call for the quiz information.
				By checking the type of question it is which is stored in the XML file, the js file knows whether to create a multiple choice type question, fill in the blanks question,
				a true or false question, or a select all question. (Only these 4 types of questions are supported.). When the user clicks 'Submit', the form calls a callback function called
				checkAnswer() which checks the answer of the user and compares it with the answers that are stored for each question in the XML file. The id's for each form which may contain the answer
				are stored in a dictionary data structure while they are dynamically created. We use a dictionary so that we can use the id as a key, and the type of question as a value.
				When checking the answer, we loop through the dictionaries keys (ids), check the value (type of question) and obtian the answer depending on the type.
				When the answer is obtained, we simply check against the correct answers and increment a score variable accordingly.
				<br><br>

				To print the score, we first refresh the page to remove previous answers and score and then dynamically create elements to show the user their score and also the correct answers.
			</p>

			<b>Documentation</b>
			<p>
				Using Materialize CSS, we are able to create an aesthetically pleasing user interface. On the welcome page, I used a background image
				which resides in shared/img. Also, every page has a navigation bar which links to the home page and the unit's html page.
				<br><br>

				<b>XML Files Format: </b>
				<p>notes.xml</p>
				<img src="shared/img/notesxml.png" alt="notes xml file structure" height=150 width=250>
				<br>
				<p>questions.xml</p>
				<img src="shared/img/questionsxml.png" alt="questions xml file structure" height=300 width=500>
				<br><br>

				<b>JavaScript Functions: </b>
				<p>loadnotes.js</p>
				<ul>
					<li>- Creates an XMLHttpRequest to do a GET call for the notes.xml file</li>
					<li>- Uses DOMParser to parse the XML file and get elements by their tag name</li>
					<li>- Dynamically create HTML elements such as divs, headers and paragraphs to display data from XML file</li>
				</ul>
				<p>buildQuiz()</p>
				<ul>
					<li>- Creates an XMLHttpRequest to do a GET call for the questions.xml file</li>
					<li>- Uses DOMParser to parse the XML file and get elements by their tag name</li>
					<li>- Check the type of question and then create HTML elements accordingly</li>
					<li>- Stores the 'id' of every form element in a dictionary where key=id and value=question type for later use</li>
					<li>- Store the correct answer in a list for later use</li>
					<li>- Creates a button which calls back the checkAnswer() function on submit</li>
				</ul>
				<p>checkAnswer()</p>
				<ul>
					<li>- Iterates through the dictionary created in buildQuiz(). For each iteration, check the type of question (value)
						and obtain the user's answer depending on the type. The for the form element is given as the key of the dictionary</li>
					<li>- After obtaining the answer, compare with the valid answers from the list created in buildQuiz()</li>
					<li>- Increments score whenever the user gets the correct answer</li>
					<li>- call printResult(score)</li>
				</ul>
				<p>printResult()</p>
				<ul>
					<li>- Calculate the user's percentage by first getting the amount of questions and then dividing their score by the total amount</li>
					<li>- Use a for loop to loop through the correct answers list to display the correct answers to the user</li>
				</ul>
			</p>

			<b>Set up and running</b>
			<p>
				To access the welcome page, assuming you are already hosting a webserver, click <a href="part2/index.html">here</a> or the link above.
				You can navigate to the lectures by selecting a unit from the navigation bar or by using the dropdrown
				in the middle of the welcome page.
				<br><br>

				To access the quiz, scroll to the bottom at the end of every unit. To grade the quiz, answer each question
				and hit the Submit button at the end of the quiz. Your score and result will be revealed after submission.
			</p>

			<b>Extra Information</b>
			<p>
				The notes for each unit were from the given presentations for each unit (written by Pearson).
				Materialize CSS was used for this whole assignment as approved by Harris Wang.
			</p>
		</div>

		<script src="shared/js/materialize.js"></script>
		<script src="shared/js/init.js"></script>
	</body>

</html>
